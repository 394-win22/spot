{"ast":null,"code":"var _jsxFileName = \"/Users/nirajshah/Library/Mobile Documents/com~apple~CloudDocs/Documents/A Northwestern/A Classes/22 Winter Quarter/CS 394/Spot/src/Map.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { MapLayout } from \"./styles/mapstyles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n};\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      lat,\n      lng\n    } = this.props.initialCenter;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      },\n      zoomLevel: 14\n    };\n  }\n\n  FavoritePosition() {\n    const map = this.map;\n    const google = this.props.google;\n    const maps = google.maps;\n    const pos = {\n      lat: 41.879463,\n      lng: -87.628461\n    };\n    let center = new maps.LatLng(pos.lat, pos.lng);\n    map.panTo(center); //this.props.google.maps.setCenter(pos);\n  }\n\n  ChangeZoom() {\n    const google = this.props.google;\n    this.setState({\n      zoomLevel: 13\n    });\n    this.loadMap(); //this.props.google.maps.setCenter(pos);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const {\n        google\n      } = this.props;\n      const maps = google.maps;\n      const mapRef = this.refs.map; // reference to the actual DOM element\n\n      const node = ReactDOM.findDOMNode(mapRef);\n      let {\n        zoom\n      } = this.props;\n      const {\n        lat,\n        lng\n      } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: this.state.zoomLevel\n      }); // maps.Map() is constructor that instantiates the map\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    if (!children) return;\n    return React.Children.map(children, c => {\n      if (!c) return;\n      return /*#__PURE__*/React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => this.ChangeZoom(),\n        children: window.innerWidth > 600 ? \"Find more locations?\" : \"More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => this.FavoritePosition(),\n        children: window.innerWidth > 600 ? \"Check home location\" : \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapLayout, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: style,\n          ref: \"map\",\n          children: \"Loading map...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), this.renderChildren()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 41.91807726393084,\n    lng: -87.65872153719155\n  },\n  centerAroundCurrentLocation: false,\n  visible: true\n};\nexport default CurrentLocation;","map":{"version":3,"sources":["/Users/nirajshah/Library/Mobile Documents/com~apple~CloudDocs/Documents/A Northwestern/A Classes/22 Winter Quarter/CS 394/Spot/src/Map.js"],"names":["React","ReactDOM","MapLayout","mapStyles","map","position","width","height","CurrentLocation","Component","constructor","props","lat","lng","initialCenter","state","currentLocation","zoomLevel","FavoritePosition","google","maps","pos","center","LatLng","panTo","ChangeZoom","setState","loadMap","componentDidUpdate","prevProps","prevState","recenterMap","current","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","mapRef","refs","node","findDOMNode","zoom","mapConfig","Object","assign","Map","renderChildren","children","Children","c","cloneElement","mapCenter","render","style","window","innerWidth","defaultProps","visible"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  MapLayout\n} from \"./styles/mapstyles\";\n\nconst mapStyles = {\n  map: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n};\n\nexport class CurrentLocation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { lat, lng } = this.props.initialCenter;\n\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng,\n      },\n      zoomLevel: 14,\n    };\n  }\n\n  FavoritePosition() {\n    const map = this.map;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    const pos = {\n      lat: 41.879463,\n      lng: -87.628461,\n    };\n\n    let center = new maps.LatLng(pos.lat, pos.lng);\n    map.panTo(center);\n\n    //this.props.google.maps.setCenter(pos);\n  }\n\n  ChangeZoom() {\n    const google = this.props.google;\n\n    this.setState({\n      zoomLevel: 13,\n    });\n\n    this.loadMap();\n\n    //this.props.google.maps.setCenter(pos);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const current = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(current.lat, current.lng);\n      map.panTo(center);\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((pos) => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude,\n            },\n          });\n        });\n      }\n    }\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // checks if google is available\n      const { google } = this.props;\n      const maps = google.maps;\n\n      const mapRef = this.refs.map;\n\n      // reference to the actual DOM element\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      let { zoom } = this.props;\n      const { lat, lng } = this.state.currentLocation;\n      const center = new maps.LatLng(lat, lng);\n\n      const mapConfig = Object.assign(\n        {},\n        {\n          center: center,\n          zoom: this.state.zoomLevel,\n        }\n      );\n\n      // maps.Map() is constructor that instantiates the map\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) return;\n\n    return React.Children.map(children, (c) => {\n      if (!c) return;\n\n      return React.cloneElement(c, {\n        map: this.map,\n        google: this.props.google,\n        mapCenter: this.state.currentLocation,\n      });\n    });\n  }\n\n  render() {\n    const style = Object.assign({}, mapStyles.map);\n\n    return (\n      <>\n        <button type=\"button\" className=\"btn\" onClick={() => this.ChangeZoom()}>\n          {window.innerWidth > 600 ? \"Find more locations?\" : \"More\"}\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={() => this.FavoritePosition()}\n        >\n          {window.innerWidth > 600 ? \"Check home location\" : \"Home\"}\n        </button>\n\n        <MapLayout>\n          <div style={style} ref=\"map\">\n            Loading map...\n          </div>\n          {this.renderChildren()}\n        </MapLayout>\n      </>\n    );\n  }\n}\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 41.91807726393084,\n    lng: -87.65872153719155,\n  },\n  centerAroundCurrentLocation: false,\n  visible: true,\n};\n\nexport default CurrentLocation;\n"]},"metadata":{},"sourceType":"module"}