{"ast":null,"code":"var _jsxFileName = \"/Users/nirajshah/Library/Mobile Documents/com~apple~CloudDocs/Documents/A Northwestern/A Classes/22 Winter Quarter/CS 394/DIrtyLittlePaws/dirtylittlepaws/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { Component, PropTypes } from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Handlebars from \"handlebars/dist/cjs/handlebars\";\nimport { MapLayout, MainLayout, PanelStyles, LocationName, AmenityName, AvailabilityTxt, PriceTxt, ScanButton, ScanButtonTxt, AmenitiesLayout, BottomNav } from \"./styles/mapstyles\";\nimport close from \"../src/styles/svgs/close.svg\";\nimport CurrentLocationIcon from \"../src/styles/svgs/Location.svg\";\nimport paws from \"../src/styles/svgs/paws.png\";\nimport Activepaws from \"../src/styles/svgs/ActivePaws.png\";\nimport { Panel, PanelGroup } from \"rsuite\";\nimport CurrentLocation from \"./Map\";\nimport { useData } from './utilities/firebase.js';\nimport { initializeApp } from 'firebase/app';\nimport { useState, useEffect } from 'react';\nimport { getDatabase, onValue, ref, set, on } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst google = window.google;\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBAAAaqRWLP7A4BwEmCVC2OWoKXw8j79W4\",\n  authDomain: \"dirtylittlepaws-487d9.firebaseapp.com\",\n  databaseURL: \"https://dirtylittlepaws-487d9-default-rtdb.firebaseio.com\",\n  projectId: \"dirtylittlepaws-487d9\",\n  storageBucket: \"dirtylittlepaws-487d9.appspot.com\",\n  messagingSenderId: \"781498327165\",\n  appId: \"1:781498327165:web:9da20c4afa727b8e5e5114\"\n};\nconst firebase = initializeApp(firebaseConfig);\nconst database = getDatabase(firebase);\n/**\n * Defines an instance of the Locator+ solution, to be instantiated\n * when the Maps library is loaded.\n */\n\nconst mapStyles = {\n  width: \"428px\",\n  height: \"934px\"\n};\n\nconst instance = /*#__PURE__*/_jsxDEV(Panel, {\n  header: \"Panel title\",\n  children: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"HELLO WORLD\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this); // function MyFireBaseHook()\n// {\n//   return function WrappedComponent()\n//     {\n//       const [locations, loading, error] = useData('/Locations/'); \n//       if (error) return <h1>{error}</h1>;\n//       if (loading) return <h1>Loading Locations...</h1>;\n//       console.log(locations)\n//       return <Component Location = {locations}/>;\n//     };\n// }\n//Initializes the map and marker functionality\n\n\nexport class MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.reserve = async marker => {\n      try {\n        await set(ref(database, `/Locations/${marker.id}/avaliable`), false);\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      // Hides or shows the InfoWindow\n      activeMarker: {},\n      // Shows the active marker upon click\n      selectedPlace: {},\n      // Shows the InfoWindow to the selected place upon a marker\n      icon: paws,\n      LocationList: [],\n      availability: []\n    };\n  } // GetData = () => {\n  //   return function WrappedComponent()\n  //   {\n  //     const [locations, loading, error] = useData('/Locations/'); \n  //     if (error) return <h1>{error}</h1>;\n  //     if (loading) return <h1>Loading Locations...</h1>;\n  //     return locations;\n  //   };\n  // }\n\n\n  componentDidMount() {\n    const reference = ref(database, '/Locations/');\n    onValue(reference, snapshot => {\n      let locations = [];\n      snapshot.forEach(snap => {\n        // snap.val() is the dictionary with all your keys/values from the 'students-list' path\n        locations.push(snap.val());\n      });\n      this.setState({\n        LocationList: locations\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.activeMarker.availability !== this.state.activeMarker.availability) {\n      this.reserve(this.state.activeMarker);\n    }\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //Renders the panel and the map <MyFireBaseHook/>\n      _jsxDEV(\"div\", {\n        id: \"outline\",\n        children: [/*#__PURE__*/_jsxDEV(\"center\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Spot \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 16\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: () => this.setState({\n            availability: false\n          }),\n          children: window.innerWidth > 600 ? \"Reserve Location\" : \"Reserve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MainLayout, {\n          id: \"main\",\n          children: [/*#__PURE__*/_jsxDEV(CurrentLocation, {\n            centerAroundCurrentLocation: true,\n            google: this.props.google,\n            children: [/*#__PURE__*/_jsxDEV(Marker, {\n              icon: CurrentLocationIcon,\n              onClick: this.onMarkerClick,\n              name: \"Current Location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 11\n            }, this), Object.values(this.state.LocationList).map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n              onClick: this.onMarkerClick,\n              icon: this.state.activeMarker === marker ? Activepaws : paws,\n              position: {\n                lat: marker.latitude,\n                lng: marker.longitude\n              },\n              name: marker.name,\n              availability: marker.availability,\n              price: \"$3.30 unlock, $0.3 per min\",\n              title: marker.amenities\n            }, marker.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 13\n            }, this)), /*#__PURE__*/_jsxDEV(InfoWindow, {\n              marker: this.state.activeMarker,\n              visible: this.state.showingInfoWindow,\n              onClose: this.onClose,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: this.state.selectedPlace.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(BottomNav, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 9\n          }, this), this.state.showingInfoWindow ? /*#__PURE__*/_jsxDEV(PanelStyles, {\n            marker: this.state.activeMarker,\n            visible: this.state.showingInfoWindow,\n            onClose: this.onClose,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: close,\n              onClick: () => this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(AvailabilityTxt, {\n              children: this.state.selectedPlace.availability\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(LocationName, {\n              children: this.state.selectedPlace.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(PriceTxt, {\n              children: this.state.selectedPlace.price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(AmenitiesLayout, {\n              children: /*#__PURE__*/_jsxDEV(AmenityName, {\n                children: this.state.selectedPlace.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(ScanButton, {\n                children: /*#__PURE__*/_jsxDEV(ScanButtonTxt, {\n                  children: \"Scan to unlock\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n} // API Keys\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAQoEnnmtQQ0bJ8fCvmKHPOI6VtNCXD6EY\"\n})(MapContainer); //Run App (not using it rn - may need it later)\n// function App() {\n//   return (\n//     //Renders the panel and the map\n//      <div className=\"panel_map\">\n//        <Panel className=\"panel\" header=\"Panel title\">\n//          <p>HELLO WORLD</p>\n//         </Panel>\n//       <div className=\"map\">\n//       {/* Map API initialization */}\n//       <Map\n//         google={this.props.google}\n//         zoom={14}\n//         style={mapStyles}\n//         initialCenter={\n//           {\n//             lat: 41.918060,\n//             lng: -87.636990\n//           }\n//         }\n//         >\n//        {/* Populating markers from marker list, allows for multiple markers */}\n//       {Object.values(markers).map(marker => (\n//             <Marker\n//               onClick={this.onMarkerClick}\n//               position={{ lat: marker.latitude, lng: marker.longitude }}\n//               key={marker.id}\n//               name={marker.name}\n//               title = {marker.amenities}\n//             />\n//         ))}\n//         {/* What shows up in the window on marker click */}\n//         <InfoWindow\n//           marker={this.state.activeMarker}\n//           visible={this.state.showingInfoWindow}\n//           onClose={this.onClose}\n//         >\n//           <div>\n//             <h4>{this.state.selectedPlace.name}</h4>\n//             <h4>{this.state.selectedPlace.title}</h4>\n//           </div>\n//         </InfoWindow>\n//       </Map>\n//       </div>\n//       </div>\n//     );\n// }\n//export default App;","map":{"version":3,"sources":["/Users/nirajshah/Library/Mobile Documents/com~apple~CloudDocs/Documents/A Northwestern/A Classes/22 Winter Quarter/CS 394/DIrtyLittlePaws/dirtylittlepaws/src/App.js"],"names":["logo","React","Component","PropTypes","Map","GoogleApiWrapper","InfoWindow","Marker","Handlebars","MapLayout","MainLayout","PanelStyles","LocationName","AmenityName","AvailabilityTxt","PriceTxt","ScanButton","ScanButtonTxt","AmenitiesLayout","BottomNav","close","CurrentLocationIcon","paws","Activepaws","Panel","PanelGroup","CurrentLocation","useData","initializeApp","useState","useEffect","getDatabase","onValue","ref","set","on","google","window","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","database","mapStyles","width","height","instance","MapContainer","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","reserve","id","error","alert","icon","LocationList","availability","componentDidMount","reference","snapshot","locations","forEach","snap","push","val","componentDidUpdate","prevProps","prevState","render","innerWidth","Object","values","map","lat","latitude","lng","longitude","name","amenities","price","title"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { Component, PropTypes } from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport Handlebars from \"handlebars/dist/cjs/handlebars\";\nimport {\n  MapLayout,\n  MainLayout,\n  PanelStyles,\n  LocationName,\n  AmenityName,\n  AvailabilityTxt,\n  PriceTxt,\n  ScanButton,\n  ScanButtonTxt,\n  AmenitiesLayout,\n  BottomNav,\n} from \"./styles/mapstyles\";\nimport close from \"../src/styles/svgs/close.svg\";\nimport CurrentLocationIcon from \"../src/styles/svgs/Location.svg\";\nimport paws from \"../src/styles/svgs/paws.png\";\nimport Activepaws from \"../src/styles/svgs/ActivePaws.png\";\nimport { Panel, PanelGroup } from \"rsuite\";\nimport CurrentLocation from \"./Map\";\nimport { useData } from './utilities/firebase.js';\n\n\nimport { initializeApp } from 'firebase/app';\nimport { useState, useEffect } from 'react';\nimport { getDatabase, onValue, ref, set, on } from 'firebase/database';\nconst google = window.google;\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBAAAaqRWLP7A4BwEmCVC2OWoKXw8j79W4\",\n  authDomain: \"dirtylittlepaws-487d9.firebaseapp.com\",\n  databaseURL: \"https://dirtylittlepaws-487d9-default-rtdb.firebaseio.com\",\n  projectId: \"dirtylittlepaws-487d9\",\n  storageBucket: \"dirtylittlepaws-487d9.appspot.com\",\n  messagingSenderId: \"781498327165\",\n  appId: \"1:781498327165:web:9da20c4afa727b8e5e5114\"\n};\n\nconst firebase = initializeApp(firebaseConfig);\nconst database = getDatabase(firebase);\n\n\n/**\n * Defines an instance of the Locator+ solution, to be instantiated\n * when the Maps library is loaded.\n */\nconst mapStyles = {\n  width: \"428px\",\n  height: \"934px\",\n};\n\nconst instance = (\n  <Panel header=\"Panel title\">\n    <p>HELLO WORLD</p>\n  </Panel>\n);\n\n\n\n// function MyFireBaseHook()\n// {\n//   return function WrappedComponent()\n//     {\n//       const [locations, loading, error] = useData('/Locations/'); \n//       if (error) return <h1>{error}</h1>;\n//       if (loading) return <h1>Loading Locations...</h1>;\n//       console.log(locations)\n//       return <Component Location = {locations}/>;\n//     };\n// }\n\n//Initializes the map and marker functionality\nexport class MapContainer extends Component {\n\n  constructor(props)\n  {\n    super(props);\n    \n    this.state = {\n      showingInfoWindow: false, // Hides or shows the InfoWindow\n      activeMarker: {}, // Shows the active marker upon click\n      selectedPlace: {}, // Shows the InfoWindow to the selected place upon a marker\n      icon:paws,\n      LocationList :[],\n      availability:[]\n    };\n  }\n  \n\n \n\n  // GetData = () => {\n  //   return function WrappedComponent()\n  //   {\n  //     const [locations, loading, error] = useData('/Locations/'); \n  //     if (error) return <h1>{error}</h1>;\n  //     if (loading) return <h1>Loading Locations...</h1>;\n\n  //     return locations;\n  //   };\n    \n  // }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n\n  onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n\n\n  componentDidMount()\n  {\n    \n    const reference = ref(database, '/Locations/');\n\n    onValue(reference, snapshot => {\n      let locations = [];\n      snapshot.forEach(snap => {\n      \n    // snap.val() is the dictionary with all your keys/values from the 'students-list' path\n      locations.push(snap.val());\n     \n    });\n   \n    this.setState({LocationList:locations});\n    });\n  \n  }\n\n  componentDidUpdate(prevProps, prevState)\n  {\n    if(prevState.activeMarker.availability !== this.state.activeMarker.availability)\n    {\n      this.reserve(this.state.activeMarker)\n    }\n\n  }\n\n   reserve = async (marker) => {\n      try {\n        await set(ref(database, `/Locations/${marker.id}/avaliable`), false);\n      } catch (error) {\n        alert(error);\n      }\n  };\n  \n\n\n\n  render() {\n   \n    return (\n      //Renders the panel and the map <MyFireBaseHook/>\n      \n      \n\n      <div id=\"outline\">\n      <center> <h1> Spot </h1> </center>\n\n      <button\n        type=\"button\"\n        className=\"btn\"\n        onClick={() =>\n        this.setState({availability: false})\n      }\n      > \n       { window.innerWidth > 600 ? \"Reserve Location\" : \"Reserve\"}\n      </button>\n\n      <MainLayout id=\"main\">\n     \n        <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n          <Marker icon = {CurrentLocationIcon} onClick={this.onMarkerClick} name={\"Current Location\"} />\n          {/* <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow> */}\n          {Object.values(this.state.LocationList).map((marker) => (\n            <Marker\n              onClick={this.onMarkerClick}\n              icon = {this.state.activeMarker === marker ? Activepaws : paws}\n              position={{ lat: marker.latitude, lng: marker.longitude }}\n              key={marker.id}\n              name={marker.name}\n              availability={marker.availability}\n              price=\"$3.30 unlock, $0.3 per min\"\n              title={marker.amenities}\n            />\n          ))}\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n          <BottomNav>\n          </BottomNav>\n        </CurrentLocation>\n        {this.state.showingInfoWindow ? (\n          <PanelStyles\n          marker={this.state.activeMarker}\n\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}>\n            <img src={close} onClick = {() => this.setState({ showingInfoWindow: false, activeMarker: null,})} /> \n            <AvailabilityTxt>\n              {this.state.selectedPlace.availability}\n            </AvailabilityTxt>\n            <LocationName>{this.state.selectedPlace.name}</LocationName>\n            <PriceTxt>{this.state.selectedPlace.price}</PriceTxt>\n\n            <AmenitiesLayout>\n              <AmenityName>{this.state.selectedPlace.title}</AmenityName>\n            </AmenitiesLayout>\n\n            <center>\n              <ScanButton>\n                <ScanButtonTxt>Scan to unlock</ScanButtonTxt>\n              </ScanButton>\n            </center>\n          </PanelStyles>\n        ) : null}\n        {/* Populating markers from marker list, allows for multiple markers */}\n        {/* What shows up in the window on marker click */}\n        \n      </MainLayout>\n      </div>\n    );\n  }\n}\n\n// API Keys\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyAQoEnnmtQQ0bJ8fCvmKHPOI6VtNCXD6EY\",\n})(MapContainer);\n\n//Run App (not using it rn - may need it later)\n// function App() {\n\n//   return (\n//     //Renders the panel and the map\n//      <div className=\"panel_map\">\n//        <Panel className=\"panel\" header=\"Panel title\">\n//          <p>HELLO WORLD</p>\n//         </Panel>\n\n//       <div className=\"map\">\n\n//       {/* Map API initialization */}\n//       <Map\n//         google={this.props.google}\n//         zoom={14}\n//         style={mapStyles}\n//         initialCenter={\n//           {\n//             lat: 41.918060,\n//             lng: -87.636990\n//           }\n//         }\n//         >\n//        {/* Populating markers from marker list, allows for multiple markers */}\n//       {Object.values(markers).map(marker => (\n//             <Marker\n//               onClick={this.onMarkerClick}\n//               position={{ lat: marker.latitude, lng: marker.longitude }}\n//               key={marker.id}\n//               name={marker.name}\n//               title = {marker.amenities}\n//             />\n//         ))}\n//         {/* What shows up in the window on marker click */}\n//         <InfoWindow\n//           marker={this.state.activeMarker}\n//           visible={this.state.showingInfoWindow}\n//           onClose={this.onClose}\n//         >\n//           <div>\n//             <h4>{this.state.selectedPlace.name}</h4>\n//             <h4>{this.state.selectedPlace.title}</h4>\n//           </div>\n//         </InfoWindow>\n//       </Map>\n//       </div>\n//       </div>\n\n//     );\n// }\n\n//export default App;\n"]},"metadata":{},"sourceType":"module"}